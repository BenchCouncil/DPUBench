# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
import url_filter_pb2 as url__filter__pb2


class URLFilterStub(object):
    """Host (x86) -> DPU (Arm):
    ========================
    gRPC server that exposes the application's API to the host
    for remote management.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.unary_stream(
                '/URLFilter/Subscribe',
                request_serializer=url__filter__pb2.SubscribeReq.SerializeToString,
                response_deserializer=common__pb2.LogRecord.FromString,
                )
        self.Create = channel.unary_unary(
                '/URLFilter/Create',
                request_serializer=url__filter__pb2.CreateReq.SerializeToString,
                response_deserializer=url__filter__pb2.CreateResp.FromString,
                )
        self.Add = channel.unary_unary(
                '/URLFilter/Add',
                request_serializer=url__filter__pb2.FilterRule.SerializeToString,
                response_deserializer=url__filter__pb2.AddResp.FromString,
                )
        self.Commit = channel.unary_unary(
                '/URLFilter/Commit',
                request_serializer=url__filter__pb2.CommitReq.SerializeToString,
                response_deserializer=url__filter__pb2.CommitResp.FromString,
                )
        self.Quit = channel.unary_unary(
                '/URLFilter/Quit',
                request_serializer=url__filter__pb2.QuitReq.SerializeToString,
                response_deserializer=url__filter__pb2.QuitResp.FromString,
                )


class URLFilterServicer(object):
    """Host (x86) -> DPU (Arm):
    ========================
    gRPC server that exposes the application's API to the host
    for remote management.
    """

    def Subscribe(self, request, context):
        """Subscribe to receive log events from the DPU 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Create a new rule work-set, possibly resetting the current work-set 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Add(self, request, context):
        """Add a new URL Filter rule 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Compile the work-set and commit it to the DPI engine 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Quit(self, request, context):
        """Quit the App 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_URLFilterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=url__filter__pb2.SubscribeReq.FromString,
                    response_serializer=common__pb2.LogRecord.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=url__filter__pb2.CreateReq.FromString,
                    response_serializer=url__filter__pb2.CreateResp.SerializeToString,
            ),
            'Add': grpc.unary_unary_rpc_method_handler(
                    servicer.Add,
                    request_deserializer=url__filter__pb2.FilterRule.FromString,
                    response_serializer=url__filter__pb2.AddResp.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=url__filter__pb2.CommitReq.FromString,
                    response_serializer=url__filter__pb2.CommitResp.SerializeToString,
            ),
            'Quit': grpc.unary_unary_rpc_method_handler(
                    servicer.Quit,
                    request_deserializer=url__filter__pb2.QuitReq.FromString,
                    response_serializer=url__filter__pb2.QuitResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'URLFilter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class URLFilter(object):
    """Host (x86) -> DPU (Arm):
    ========================
    gRPC server that exposes the application's API to the host
    for remote management.
    """

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/URLFilter/Subscribe',
            url__filter__pb2.SubscribeReq.SerializeToString,
            common__pb2.LogRecord.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/URLFilter/Create',
            url__filter__pb2.CreateReq.SerializeToString,
            url__filter__pb2.CreateResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/URLFilter/Add',
            url__filter__pb2.FilterRule.SerializeToString,
            url__filter__pb2.AddResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/URLFilter/Commit',
            url__filter__pb2.CommitReq.SerializeToString,
            url__filter__pb2.CommitResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Quit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/URLFilter/Quit',
            url__filter__pb2.QuitReq.SerializeToString,
            url__filter__pb2.QuitResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
